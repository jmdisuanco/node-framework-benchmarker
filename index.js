"use strict";
const config = require("./config");
const pkg = require('./package')
const sortByCol = (arr, col = 1, order = 'asc') => {
    col = col - 1
    let result
    result = arr.sort((a, b) => a[col].toString().localeCompare(b[col]));

    if (order === 'desc') {
        return result.reverse()
    } else {
        return result
    }


}


const {
    spawn
} = require("child_process");
const fs = require("fs");
const autocannon = require("autocannon");
const os = require("os");
let cpu = os.cpus();
var table = require("markdown-table");
let env = {
    os: os.arch(),
    model: cpu[0].model,
    speed: cpu[0].speed,
    cores: Object.keys(cpu).length,
    mem: os.totalmem()
};
let summary = [];
let framework = fs.readdirSync("./frameworks");
let index = 0;
let max = Object.keys(framework).length;
let frameworks = [];
console.log(`${max} frameworks to benchmark`);
let start = f => {
    let child = spawn("node", [`./frameworks/${f}`]);

    child.stdout.on("data", data => {
        console.log(`starting ${f}`);
        benchmark(child, f);
    });

    child.stderr.on("data", data => {
        console.log("Error");
        console.log("test: " + data);
    });

    child.on("close", code => {
        console.log("closing ", f);
        if (index < max) {
            start(framework[index]);
        } else {
            let report = {
                env,
                frameworks
            };
            fs.writeFileSync("./data/report.json", JSON.stringify(report, null, 2));
            console.log("result has been save at report.json");
            summaryReport(report);
        }
    });
};

start(framework[index]);

let benchmark = (child, f) => {
    console.log(`${index + 1} of ${max}`);
    autocannon({
            title: f.split(".")[0],
            url: `${config.url}:${config.port}`,
            connections: config.connections,
            pipelining: config.pipelining,
            duration: config.duration
        },
        endBechmark(child)
    );
};

let endBechmark = child => (err, result) => {
    index += 1;
    frameworks.push(result);
    summary.push({
        title: result.title,
        request: result.requests.average
    });
    child.kill("SIGINT");
};

let summaryReport = report => {
    let {
        env,
    } = report;

    let osMD = [
        ['Model', 'Cores', 'Ram (gb)'],
        [env.model, env.cores, env.mem /
            (1024 * 1024 * 1024)
        ]
    ]
    let osTable = table(osMD)
    let summaryRows = []

    let summaryHeader = ['Framework', 'Version', 'Req/sec']
    summary.map(f => {
        summaryRows.push([f.title, pkg.dependencies[f.title], Math.round(f.request)])
    });
    summaryRows = sortByCol(summaryRows, 3, 'desc')
    let SummaryReport = [summaryHeader, ...summaryRows]
    let SummaryTable = table(SummaryReport)
    console.log(osTable)
    console.log(SummaryTable)
    let summaryMD = `
# Environment 
${osTable} 

# Benchmark Summary
${SummaryTable}
    
# Configuration Used
    
\`\`\`javascript
${JSON.stringify(config,null,2)}
\`\`\`

Report generated by [node-framework-benchmarker](https://github.com/jmdisuanco/node-framework-benchmarker)
`
    fs.writeFileSync("./data/summary.md", summaryMD);
};